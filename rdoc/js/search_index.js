var search_data = {"index":{"searchIndex":["gli","ambiguouscommand","app","badcommandline","command","parentkey","commandexception","commandfinder","commandlinetoken","commandoptionblockparser","commands","compoundcommand","doc","documentlistener","rdocdocumentlistener","customexit","dsl","glioptionblockparser","legacycommandoptionblockparser","missingrequiredargumentsexception","optionparsingresult","options","preconditionfailed","requesthelp","standardexception","terminal","unknowncommand","unknowncommandargument","unknownglobalargument","<=>()","[]()","[]=()","accept()","action()","arg()","arg_name()","arguments()","around()","autocomplete_commands()","beginning()","beginning()","break_on_non_option?()","break_on_non_option?()","c()","command()","command()","command()","command=()","command_exists?()","command_exists?()","commands()","commands()","commands_from()","config_file()","convert_to_openstruct!()","d()","default_command()","default_command()","default_command()","default_command()","default_desc()","default_size()","default_size=()","default_value()","desc()","do_parse()","do_parse()","document()","end_command()","end_command()","end_commands()","end_commands()","end_options()","end_options()","ending()","ending()","example()","exit_code()","exit_code()","exit_code()","exit_code()","exit_code()","exit_now!()","f()","find_command()","flag()","flag()","flag()","help_now!()","hide_commands_without_desc()","included()","instance()","long_desc()","map()","name_for_help()","names_and_aliases()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","nodoc()","on_error()","options()","options()","parse!()","post()","pre()","preserve_argv()","program_desc()","program_desc()","program_desc()","program_long_desc()","program_long_desc()","program_long_desc()","run()","s()","size()","skips_around()","skips_post()","skips_pre()","sort_help()","subcommand_option_handling()","switch()","switch()","switch()","synopsis_format()","to_a()","to_sym()","use_openstruct()","version()","version()","version()","wrap_help_text()","readme"],"longSearchIndex":["gli","gli::ambiguouscommand","gli::app","gli::badcommandline","gli::command","gli::command::parentkey","gli::commandexception","gli::commandfinder","gli::commandlinetoken","gli::commandoptionblockparser","gli::commands","gli::commands::compoundcommand","gli::commands::doc","gli::commands::doc::documentlistener","gli::commands::rdocdocumentlistener","gli::customexit","gli::dsl","gli::glioptionblockparser","gli::legacycommandoptionblockparser","gli::missingrequiredargumentsexception","gli::optionparsingresult","gli::options","gli::preconditionfailed","gli::requesthelp","gli::standardexception","gli::terminal","gli::unknowncommand","gli::unknowncommandargument","gli::unknownglobalargument","gli::commandlinetoken#<=>()","gli::options#[]()","gli::options#[]=()","gli::app#accept()","gli::command#action()","gli::dsl#arg()","gli::dsl#arg_name()","gli::app#arguments()","gli::app#around()","gli::app#autocomplete_commands()","gli::commands::doc::documentlistener#beginning()","gli::commands::rdocdocumentlistener#beginning()","gli::commandoptionblockparser#break_on_non_option?()","gli::legacycommandoptionblockparser#break_on_non_option?()","gli::dsl#c()","gli::commands::doc::documentlistener#command()","gli::commands::rdocdocumentlistener#command()","gli::dsl#command()","gli::commandoptionblockparser#command=()","gli::terminal#command_exists?()","gli::terminal::command_exists?()","gli::commands::doc::documentlistener#commands()","gli::commands::rdocdocumentlistener#commands()","gli::app#commands_from()","gli::app#config_file()","gli::optionparsingresult#convert_to_openstruct!()","gli::dsl#d()","gli::app#default_command()","gli::command#default_command()","gli::commands::doc::documentlistener#default_command()","gli::commands::rdocdocumentlistener#default_command()","gli::command#default_desc()","gli::terminal::default_size()","gli::terminal::default_size=()","gli::dsl#default_value()","gli::dsl#desc()","gli::commandoptionblockparser#do_parse()","gli::glioptionblockparser#do_parse()","gli::commands::doc#document()","gli::commands::doc::documentlistener#end_command()","gli::commands::rdocdocumentlistener#end_command()","gli::commands::doc::documentlistener#end_commands()","gli::commands::rdocdocumentlistener#end_commands()","gli::commands::doc::documentlistener#end_options()","gli::commands::rdocdocumentlistener#end_options()","gli::commands::doc::documentlistener#ending()","gli::commands::rdocdocumentlistener#ending()","gli::command#example()","gli::badcommandline#exit_code()","gli::commandexception#exit_code()","gli::preconditionfailed#exit_code()","gli::requesthelp#exit_code()","gli::standardexception#exit_code()","gli::app#exit_now!()","gli::dsl#f()","gli::commandfinder#find_command()","gli::commands::doc::documentlistener#flag()","gli::commands::rdocdocumentlistener#flag()","gli::dsl#flag()","gli::app#help_now!()","gli::app#hide_commands_without_desc()","gli::included()","gli::terminal::instance()","gli::dsl#long_desc()","gli::options#map()","gli::command#name_for_help()","gli::commandlinetoken#names_and_aliases()","gli::command::new()","gli::commandexception::new()","gli::commandfinder::new()","gli::commands::compoundcommand::new()","gli::commands::doc::new()","gli::commands::doc::documentlistener::new()","gli::commands::rdocdocumentlistener::new()","gli::customexit::new()","gli::glioptionblockparser::new()","gli::missingrequiredargumentsexception::new()","gli::requesthelp::new()","gli::commands::doc#nodoc()","gli::app#on_error()","gli::commands::doc::documentlistener#options()","gli::commands::rdocdocumentlistener#options()","gli::glioptionblockparser#parse!()","gli::app#post()","gli::app#pre()","gli::app#preserve_argv()","gli::app#program_desc()","gli::commands::doc::documentlistener#program_desc()","gli::commands::rdocdocumentlistener#program_desc()","gli::app#program_long_desc()","gli::commands::doc::documentlistener#program_long_desc()","gli::commands::rdocdocumentlistener#program_long_desc()","gli::run()","gli::dsl#s()","gli::terminal#size()","gli::app#skips_around()","gli::app#skips_post()","gli::app#skips_pre()","gli::app#sort_help()","gli::app#subcommand_option_handling()","gli::commands::doc::documentlistener#switch()","gli::commands::rdocdocumentlistener#switch()","gli::dsl#switch()","gli::app#synopsis_format()","gli::optionparsingresult#to_a()","gli::command::parentkey#to_sym()","gli::app#use_openstruct()","gli::app#version()","gli::commands::doc::documentlistener#version()","gli::commands::rdocdocumentlistener#version()","gli::app#wrap_help_text()",""],"info":[["GLI","","classes/GLI.html","",""],["GLI::AmbiguousCommand","","classes/GLI/AmbiguousCommand.html","","<p>The command issued partially matches more than one command\n"],["GLI::App","","classes/GLI/App.html","","<p>A means to define and parse a command line interface that works as Git&#39;s does, in that you specify …\n"],["GLI::BadCommandLine","","classes/GLI/BadCommandLine.html","","<p>Indicates that the command line invocation was bad\n"],["GLI::Command","","classes/GLI/Command.html","","<p>A command to be run, in context of global flags and switches.  You are given an instance of this class …\n"],["GLI::Command::ParentKey","","classes/GLI/Command/ParentKey.html","",""],["GLI::CommandException","","classes/GLI/CommandException.html","",""],["GLI::CommandFinder","","classes/GLI/CommandFinder.html","",""],["GLI::CommandLineToken","","classes/GLI/CommandLineToken.html","","<p>Abstract base class for a logical element of a command line, mostly so that subclasses can have similar …\n"],["GLI::CommandOptionBlockParser","","classes/GLI/CommandOptionBlockParser.html","",""],["GLI::Commands","","classes/GLI/Commands.html","",""],["GLI::Commands::CompoundCommand","","classes/GLI/Commands/CompoundCommand.html","","<p>A command that calls other commands in order\n"],["GLI::Commands::Doc","","classes/GLI/Commands/Doc.html","","<p>Takes a DocListener which will be called with all of the meta-data and documentation about your app, …\n"],["GLI::Commands::Doc::DocumentListener","","classes/GLI/Commands/Doc/DocumentListener.html","","<p>Interface for a listener that is called during various parts of the doc process\n"],["GLI::Commands::RdocDocumentListener","","classes/GLI/Commands/RdocDocumentListener.html","",""],["GLI::CustomExit","","classes/GLI/CustomExit.html","","<p>Raise this if you want to use an exit status that isn&#39;t the default provided by GLI.  Note that  …\n"],["GLI::DSL","","classes/GLI/DSL.html","","<p>The primary DSL for GLI.  This represents the methods shared between your top-level app and the commands. …\n"],["GLI::GLIOptionBlockParser","","classes/GLI/GLIOptionBlockParser.html","","<p>An “option block” is a set of parseable options, starting from the beginning of the argument …\n"],["GLI::LegacyCommandOptionBlockParser","","classes/GLI/LegacyCommandOptionBlockParser.html","",""],["GLI::MissingRequiredArgumentsException","","classes/GLI/MissingRequiredArgumentsException.html","",""],["GLI::OptionParsingResult","","classes/GLI/OptionParsingResult.html","",""],["GLI::Options","","classes/GLI/Options.html","","<p>Subclass of <code>OpenStruct</code> that provides hash-like methods for #[] and #[]=.  Note that is is <strong>not</strong> a Hash …\n"],["GLI::PreconditionFailed","","classes/GLI/PreconditionFailed.html","",""],["GLI::RequestHelp","","classes/GLI/RequestHelp.html","","<p>Hack to request help from within a command Will <strong>not</strong> be rethrown when GLI_DEBUG is ON\n"],["GLI::StandardException","","classes/GLI/StandardException.html","","<p>Mixed into all exceptions that GLI handles; you can use this to catch anything that came from GLI intentionally. …\n"],["GLI::Terminal","","classes/GLI/Terminal.html","","<p>Class to encapsulate stuff about the terminal. This is useful to application developers as a canonical …\n"],["GLI::UnknownCommand","","classes/GLI/UnknownCommand.html","","<p>Indicates the bad command line was an unknown command\n"],["GLI::UnknownCommandArgument","","classes/GLI/UnknownCommandArgument.html","","<p>Indicates the bad command line was an unknown command argument\n"],["GLI::UnknownGlobalArgument","","classes/GLI/UnknownGlobalArgument.html","","<p>Indicates the bad command line was an unknown global argument\n"],["<=>","GLI::CommandLineToken","classes/GLI/CommandLineToken.html#method-i-3C-3D-3E","(other)","<p>Sort based on primary name\n"],["[]","GLI::Options","classes/GLI/Options.html#method-i-5B-5D","(k)","<p>Return the value of an attribute\n"],["[]=","GLI::Options","classes/GLI/Options.html#method-i-5B-5D-3D","(k, v)","<p>Set the value of an attribute\n"],["accept","GLI::App","classes/GLI/App.html#method-i-accept","(object,&block)","<p>Configure a type conversion not already provided by the underlying OptionParser. This works more or less …\n"],["action","GLI::Command","classes/GLI/Command.html#method-i-action","(&block)","<p>Define the action to take when the user executes this command.  Every command should either define this …\n"],["arg","GLI::DSL","classes/GLI/DSL.html#method-i-arg","(name, options=[])","<p>Describes one of the arguments of the next command\n<p><code>name</code> &mdash; A String that <strong>briefly</strong> describes the argument given …\n"],["arg_name","GLI::DSL","classes/GLI/DSL.html#method-i-arg_name","(name,options=[])","<p>Describe the argument name of the next flag.  It&#39;s important to keep this VERY short and, ideally, …\n"],["arguments","GLI::App","classes/GLI/App.html#method-i-arguments","(handling_strategy)","<p>How to handle argument validation.\n<p>handling_strategy &mdash; One of:\n<p><code>:loose</code> &mdash; no argument validation.  Use of `arg` …\n"],["around","GLI::App","classes/GLI/App.html#method-i-around","(&a_proc)","<p>This inverts the pre/post concept.  This is useful when you have a global shared resource that is governed …\n"],["autocomplete_commands","GLI::App","classes/GLI/App.html#method-i-autocomplete_commands","(boolean)","<p>Enables/Disables command autocomplete, where partially spelled commands are automatically expanded to …\n"],["beginning","GLI::Commands::Doc::DocumentListener","classes/GLI/Commands/Doc/DocumentListener.html#method-i-beginning","()","<p>Called before processing begins\n"],["beginning","GLI::Commands::RdocDocumentListener","classes/GLI/Commands/RdocDocumentListener.html#method-i-beginning","()",""],["break_on_non_option?","GLI::CommandOptionBlockParser","classes/GLI/CommandOptionBlockParser.html#method-i-break_on_non_option-3F","()",""],["break_on_non_option?","GLI::LegacyCommandOptionBlockParser","classes/GLI/LegacyCommandOptionBlockParser.html#method-i-break_on_non_option-3F","()",""],["c","GLI::DSL","classes/GLI/DSL.html#method-i-c","(*names)",""],["command","GLI::Commands::Doc::DocumentListener","classes/GLI/Commands/Doc/DocumentListener.html#method-i-command","(name,aliases,desc,long_desc,arg_name,arg_options)","<p>Gives you a command in the current context and creates a new context of this command\n"],["command","GLI::Commands::RdocDocumentListener","classes/GLI/Commands/RdocDocumentListener.html#method-i-command","(name,aliases,desc,long_desc,arg_name,arg_options)","<p>Gives you a command in the current context and creates a new context of this command\n"],["command","GLI::DSL","classes/GLI/DSL.html#method-i-command","(*names)","<p>Define a new command.  This can be done in a few ways, but the most common method is to pass a symbol …\n"],["command=","GLI::CommandOptionBlockParser","classes/GLI/CommandOptionBlockParser.html#method-i-command-3D","(command_being_parsed)",""],["command_exists?","GLI::Terminal","classes/GLI/Terminal.html#method-i-command_exists-3F","(command)",""],["command_exists?","GLI::Terminal","classes/GLI/Terminal.html#method-c-command_exists-3F","(command)","<p>Returns true if the given command exists on this system\n<p><code>command</code> &mdash; The command, as a String, to check for, …\n\n"],["commands","GLI::Commands::Doc::DocumentListener","classes/GLI/Commands/Doc/DocumentListener.html#method-i-commands","()","<p>Called at the start of commands for the current context\n"],["commands","GLI::Commands::RdocDocumentListener","classes/GLI/Commands/RdocDocumentListener.html#method-i-commands","()",""],["commands_from","GLI::App","classes/GLI/App.html#method-i-commands_from","(path)","<p>Loads ruby files in the load path that start with <code>path</code>, which are presumed to be commands for your executable. …\n"],["config_file","GLI::App","classes/GLI/App.html#method-i-config_file","(filename)","<p>Sets that this app uses a config file as well as the name of the config file.\n<p><code>filename</code> &mdash; A String representing …\n\n"],["convert_to_openstruct!","GLI::OptionParsingResult","classes/GLI/OptionParsingResult.html#method-i-convert_to_openstruct-21","()",""],["d","GLI::DSL","classes/GLI/DSL.html#method-i-d","(description)",""],["default_command","GLI::App","classes/GLI/App.html#method-i-default_command","(command)","<p>Sets a default command to run when none is specified on the command line.  Note that if you use this, …\n"],["default_command","GLI::Command","classes/GLI/Command.html#method-i-default_command","(command_name)","<p>Set the default command if this command has subcommands and the user doesn&#39;t  provide a subcommand …\n"],["default_command","GLI::Commands::Doc::DocumentListener","classes/GLI/Commands/Doc/DocumentListener.html#method-i-default_command","(name)","<p>Gives you the name of the current command in the current context\n"],["default_command","GLI::Commands::RdocDocumentListener","classes/GLI/Commands/RdocDocumentListener.html#method-i-default_command","(name)","<p>Gives you the name of the current command in the current context\n"],["default_desc","GLI::Command","classes/GLI/Command.html#method-i-default_desc","(desc)","<p>Describes this commands action block when it <strong>also</strong> has subcommands. In this case, the GLI::DSL#desc value …\n"],["default_size","GLI::Terminal","classes/GLI/Terminal.html#method-c-default_size","()","<p>Get the default size of the terminal when we can&#39;t figure it out\n<p>Returns an array of int [cols,rows] …\n"],["default_size=","GLI::Terminal","classes/GLI/Terminal.html#method-c-default_size-3D","(size)","<p>Set the default size of the terminal to use when we can&#39;t figure it out\n<p><code>size</code> &mdash; array of two int [cols,rows] …\n\n"],["default_value","GLI::DSL","classes/GLI/DSL.html#method-i-default_value","(val)","<p>set the default value of the next flag or switch\n<p><code>val</code> &mdash; The default value to be used for the following flag …\n\n"],["desc","GLI::DSL","classes/GLI/DSL.html#method-i-desc","(description)","<p>Describe the next switch, flag, or command.  This should be a short, one-line description\n<p><code>description</code> … &mdash; "],["do_parse","GLI::CommandOptionBlockParser","classes/GLI/CommandOptionBlockParser.html#method-i-do_parse","(args)",""],["do_parse","GLI::GLIOptionBlockParser","classes/GLI/GLIOptionBlockParser.html#method-i-do_parse","(args)",""],["document","GLI::Commands::Doc","classes/GLI/Commands/Doc.html#method-i-document","(document_listener)","<p>Generates documentation using the listener\n"],["end_command","GLI::Commands::Doc::DocumentListener","classes/GLI/Commands/Doc/DocumentListener.html#method-i-end_command","(name)","<p>Ends a command, and “pops” you back up one context\n"],["end_command","GLI::Commands::RdocDocumentListener","classes/GLI/Commands/RdocDocumentListener.html#method-i-end_command","(name)","<p>Ends a command, and “pops” you back up one context\n"],["end_commands","GLI::Commands::Doc::DocumentListener","classes/GLI/Commands/Doc/DocumentListener.html#method-i-end_commands","()","<p>Called when all commands for the current context have been vended\n"],["end_commands","GLI::Commands::RdocDocumentListener","classes/GLI/Commands/RdocDocumentListener.html#method-i-end_commands","()",""],["end_options","GLI::Commands::Doc::DocumentListener","classes/GLI/Commands/Doc/DocumentListener.html#method-i-end_options","()","<p>Called when all options for the current context have been vended\n"],["end_options","GLI::Commands::RdocDocumentListener","classes/GLI/Commands/RdocDocumentListener.html#method-i-end_options","()",""],["ending","GLI::Commands::Doc::DocumentListener","classes/GLI/Commands/Doc/DocumentListener.html#method-i-ending","()","<p>Called when processing has completed\n"],["ending","GLI::Commands::RdocDocumentListener","classes/GLI/Commands/RdocDocumentListener.html#method-i-ending","()","<p>Called when processing has completed\n"],["example","GLI::Command","classes/GLI/Command.html#method-i-example","(example_invocation,options = {})","<p>Specify an example invocation.\n<p>example_invocation &mdash; test of a complete command-line invocation you want …\n"],["exit_code","GLI::BadCommandLine","classes/GLI/BadCommandLine.html#method-i-exit_code","()",""],["exit_code","GLI::CommandException","classes/GLI/CommandException.html#method-i-exit_code","()",""],["exit_code","GLI::PreconditionFailed","classes/GLI/PreconditionFailed.html#method-i-exit_code","()",""],["exit_code","GLI::RequestHelp","classes/GLI/RequestHelp.html#method-i-exit_code","()",""],["exit_code","GLI::StandardException","classes/GLI/StandardException.html#method-i-exit_code","()",""],["exit_now!","GLI::App","classes/GLI/App.html#method-i-exit_now-21","(message,exit_code=1)","<p>Simpler means of exiting with a custom exit code.  This will raise a CustomExit with the given message …\n"],["f","GLI::DSL","classes/GLI/DSL.html#method-i-f","(*names)",""],["find_command","GLI::CommandFinder","classes/GLI/CommandFinder.html#method-i-find_command","(name)",""],["flag","GLI::Commands::Doc::DocumentListener","classes/GLI/Commands/Doc/DocumentListener.html#method-i-flag","(name,aliases,desc,long_desc,default_value,arg_name,must_match,type)","<p>Gives you a flag in the current context\n"],["flag","GLI::Commands::RdocDocumentListener","classes/GLI/Commands/RdocDocumentListener.html#method-i-flag","(name,aliases,desc,long_desc,default_value,arg_name,must_match,type)","<p>Gives you a flag in the current context\n"],["flag","GLI::DSL","classes/GLI/DSL.html#method-i-flag","(*names)","<p>Create a flag, which is a switch that takes an argument\n<p><code>names</code> &mdash; a String or Symbol, or an Array of String …\n"],["help_now!","GLI::App","classes/GLI/App.html#method-i-help_now-21","(message=nil)","<p>Exit now, showing the user help for the command they executed.  Use #exit_now! to just show the error …\n"],["hide_commands_without_desc","GLI::App","classes/GLI/App.html#method-i-hide_commands_without_desc","(hide=nil)","<p>Provide a flag to choose whether to hide or not from the help the undescribed commands. By default the …\n"],["included","GLI","classes/GLI.html#method-c-included","(klass)",""],["instance","GLI::Terminal","classes/GLI/Terminal.html#method-c-instance","()","<p>Provide access to the shared instance.\n"],["long_desc","GLI::DSL","classes/GLI/DSL.html#method-i-long_desc","(long_desc)","<p>Provide a longer, more detailed description.  This will be reformatted and wrapped to fit in the terminal&#39;s …\n"],["map","GLI::Options","classes/GLI/Options.html#method-i-map","(&block)",""],["name_for_help","GLI::Command","classes/GLI/Command.html#method-i-name_for_help","()","<p>Returns full name for help command including parents\n<p>Example\n\n<pre><code>command :remote do |t|\n  t.command :add do ...\n</code></pre>\n"],["names_and_aliases","GLI::CommandLineToken","classes/GLI/CommandLineToken.html#method-i-names_and_aliases","()","<p>Array of the name and aliases, as string\n"],["new","GLI::Command","classes/GLI/Command.html#method-c-new","(options)","<p>Create a new command.\n<p>options &mdash; Keys should be:\n<p><code>names</code> &mdash; A String, Symbol, or Array of String or Symbol that …\n"],["new","GLI::CommandException","classes/GLI/CommandException.html#method-c-new","(message,command_in_context,exit_code=nil)","<p><code>message</code> &mdash; the error message to show the user\n<p><code>command</code> &mdash; the command we were using to parse command-specific …\n\n"],["new","GLI::CommandFinder","classes/GLI/CommandFinder.html#method-c-new","(commands, options = {})",""],["new","GLI::Commands::CompoundCommand","classes/GLI/Commands/CompoundCommand.html#method-c-new","(base,configuration,options={})","<p>base &mdash; object that respondes to <code>commands</code>\n<p>configuration &mdash; Array of arrays: index 0 is the array of names of …\n\n"],["new","GLI::Commands::Doc","classes/GLI/Commands/Doc.html#method-c-new","(app)","<p>Create the Doc generator based on the GLI app passed in\n"],["new","GLI::Commands::Doc::DocumentListener","classes/GLI/Commands/Doc/DocumentListener.html#method-c-new","(global_options,options,arguments,app)",""],["new","GLI::Commands::RdocDocumentListener","classes/GLI/Commands/RdocDocumentListener.html#method-c-new","(global_options,options,arguments,app)",""],["new","GLI::CustomExit","classes/GLI/CustomExit.html#method-c-new","(message,exit_code)","<p>Create a custom exit exception\n<p><code>message</code> &mdash; String containing error message to show the user\n<p><code>exit_code</code> &mdash; the exit …\n"],["new","GLI::GLIOptionBlockParser","classes/GLI/GLIOptionBlockParser.html#method-c-new","(option_parser_factory,exception_klass_or_block)","<p>Create the parser using the given <code>OptionParser</code> instance and exception handling strategy.\n<p>option_parser_factory … &mdash; "],["new","GLI::MissingRequiredArgumentsException","classes/GLI/MissingRequiredArgumentsException.html#method-c-new","(message,command)","<p><code>message</code> &mdash; the error message to show the user\n<p><code>command</code> &mdash; the command we were using to parse command-specific …\n\n"],["new","GLI::RequestHelp","classes/GLI/RequestHelp.html#method-c-new","(command_in_context)",""],["nodoc","GLI::Commands::Doc","classes/GLI/Commands/Doc.html#method-i-nodoc","()",""],["on_error","GLI::App","classes/GLI/App.html#method-i-on_error","(&a_proc)","<p>Define a block to run if an error occurs. The block will receive any Exception that was caught. It should …\n"],["options","GLI::Commands::Doc::DocumentListener","classes/GLI/Commands/Doc/DocumentListener.html#method-i-options","()","<p>Called at the start of options for the current context\n"],["options","GLI::Commands::RdocDocumentListener","classes/GLI/Commands/RdocDocumentListener.html#method-i-options","()",""],["parse!","GLI::GLIOptionBlockParser","classes/GLI/GLIOptionBlockParser.html#method-i-parse-21","(args)","<p>Parse the given argument list, returning the unparsed arguments and options hash of parsed arguments. …\n"],["post","GLI::App","classes/GLI/App.html#method-i-post","(&a_proc)","<p>Define a block to run after the command was executed, <strong>only if there was not an error</strong>. The block will …\n"],["pre","GLI::App","classes/GLI/App.html#method-i-pre","(&a_proc)","<p>Define a block to run after command line arguments are parsed but before any command is run.  If this …\n"],["preserve_argv","GLI::App","classes/GLI/App.html#method-i-preserve_argv","(preserve=true)","<p>By default, GLI mutates the argument passed to it.  This is consistent with <code>OptionParser</code>, but be less …\n"],["program_desc","GLI::App","classes/GLI/App.html#method-i-program_desc","(description=nil)","<p>Describe the overall application/programm.  This should be a one-sentence summary of what your program …\n"],["program_desc","GLI::Commands::Doc::DocumentListener","classes/GLI/Commands/Doc/DocumentListener.html#method-i-program_desc","(desc)","<p>Gives you the program description\n"],["program_desc","GLI::Commands::RdocDocumentListener","classes/GLI/Commands/RdocDocumentListener.html#method-i-program_desc","(desc)","<p>Gives you the program description\n"],["program_long_desc","GLI::App","classes/GLI/App.html#method-i-program_long_desc","(description=nil)","<p>Provide a longer description of the program.  This can be as long as needed, and use double-newlines …\n"],["program_long_desc","GLI::Commands::Doc::DocumentListener","classes/GLI/Commands/Doc/DocumentListener.html#method-i-program_long_desc","(desc)","<p>Gives you the program long description\n"],["program_long_desc","GLI::Commands::RdocDocumentListener","classes/GLI/Commands/RdocDocumentListener.html#method-i-program_long_desc","(desc)",""],["run","GLI","classes/GLI.html#method-c-run","(*args)",""],["s","GLI::DSL","classes/GLI/DSL.html#method-i-s","(*names)",""],["size","GLI::Terminal","classes/GLI/Terminal.html#method-i-size","()","<p>Get the size of the current terminal. Ripped from hirb\n<p>Returns an Array of size two Ints representing …\n"],["skips_around","GLI::App","classes/GLI/App.html#method-i-skips_around","()","<p>Use this if the following command should not have the around block executed. By default, the around block …\n"],["skips_post","GLI::App","classes/GLI/App.html#method-i-skips_post","()","<p>Use this if the following command should not have the post block executed. By default, the post block …\n"],["skips_pre","GLI::App","classes/GLI/App.html#method-i-skips_pre","()","<p>Use this if the following command should not have the pre block executed. By default, the pre block is …\n"],["sort_help","GLI::App","classes/GLI/App.html#method-i-sort_help","(sort_type)","<p>Control how commands and options are sorted in help output.  By default, they are sorted alphabetically. …\n"],["subcommand_option_handling","GLI::App","classes/GLI/App.html#method-i-subcommand_option_handling","(handling_strategy)","<p>How to handle subcommand options.  In general, you want to set this to <code>:normal</code>, which treats each subcommand …\n"],["switch","GLI::Commands::Doc::DocumentListener","classes/GLI/Commands/Doc/DocumentListener.html#method-i-switch","(name,aliases,desc,long_desc,negatable)","<p>Gives you a switch in the current context\n"],["switch","GLI::Commands::RdocDocumentListener","classes/GLI/Commands/RdocDocumentListener.html#method-i-switch","(name,aliases,desc,long_desc,negatable)","<p>Gives you a switch in the current context\n"],["switch","GLI::DSL","classes/GLI/DSL.html#method-i-switch","(*names)","<p>Create a switch, which is a command line flag that takes no arguments (thus, it <em>switches</em> something on) …\n"],["synopsis_format","GLI::App","classes/GLI/App.html#method-i-synopsis_format","(format)","<p>Control how the SYNOPSIS is formatted.\n<p>format &mdash; one of:\n<p><code>:full</code> &mdash; the default, show subcommand options and flags …\n"],["to_a","GLI::OptionParsingResult","classes/GLI/OptionParsingResult.html#method-i-to_a","()","<p>Allows us to splat this object into blocks and methods expecting parameters in this order\n"],["to_sym","GLI::Command::ParentKey","classes/GLI/Command/ParentKey.html#method-i-to_sym","()",""],["use_openstruct","GLI::App","classes/GLI/App.html#method-i-use_openstruct","(use_openstruct)","<p>Call this with <code>true</code> will cause the <code>global_options</code> and <code>options</code> passed to your code to be wrapped in Options …\n"],["version","GLI::App","classes/GLI/App.html#method-i-version","(version)","<p>Indicate the version of your application\n<p><code>version</code> &mdash; String containing the version of your application.\n\n"],["version","GLI::Commands::Doc::DocumentListener","classes/GLI/Commands/Doc/DocumentListener.html#method-i-version","(version)","<p>Gives you the program version\n"],["version","GLI::Commands::RdocDocumentListener","classes/GLI/Commands/RdocDocumentListener.html#method-i-version","(version)","<p>Gives you the program version\n"],["wrap_help_text","GLI::App","classes/GLI/App.html#method-i-wrap_help_text","(wrap_type)","<p>Set how help text is wrapped.\n<p>wrap_type &mdash; Symbol indicating how you&#39;d like text wrapped:\n<p><code>:to_terminal</code> … &mdash; "],["README","","files/README_rdoc.html","","<p>GLI, the Git-Like Interface Command Line Parser\n<p>GLI allows you to create command-line app in Ruby that …\n"]]}}